generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  accounts      Account[]
  sessions      Session[]
  watchlists    Watchlist[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Player {
  id          String   @id @default(cuid())
  nflId       String   @unique @map("nfl_id")
  name        String
  position    String
  team        String
  age         Int?
  experience  Int?
  height      String?  // Added this field
  weight      Int?     // Added this field
  college     String?  // Added this field
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  stats       PlayerStat[]
  predictions PlayerPrediction[]
  watchlists  Watchlist[]
  
  @@map("players")
}

model PlayerStat {
  id        String   @id @default(cuid())
  playerId  String   @map("player_id")
  season    Int
  week      Int?
  
  // Passing stats
  passingYards      Int? @map("passing_yards")
  passingTds        Int? @map("passing_tds")
  interceptions     Int?
  passingAttempts   Int? @map("passing_attempts")
  passingCompletions Int? @map("passing_completions")
  
  // Rushing stats
  rushingYards    Int? @map("rushing_yards")
  rushingTds      Int? @map("rushing_tds")
  rushingAttempts Int? @map("rushing_attempts")
  
  // Receiving stats
  receptions      Int?
  receivingYards  Int? @map("receiving_yards")
  receivingTds    Int? @map("receiving_tds")
  targets         Int?
  
  // Fantasy stats
  fantasyPoints   Float? @map("fantasy_points")
  fantasyPointsPpr Float? @map("fantasy_points_ppr")
  
  createdAt DateTime @default(now()) @map("created_at")
  
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  
  @@unique([playerId, season, week])
  @@map("player_stats")
}

model PlayerPrediction {
  id              String   @id @default(cuid())
  playerId        String   @map("player_id")
  season          Int
  
  predictedPoints Float    @map("predicted_points")
  confidence      Float
  reasoning       String?
  
  // Prediction components
  projectedStats  Json?    @map("projected_stats")
  breakoutScore   Float?   @map("breakout_score")
  bustRisk        Float?   @map("bust_risk")
  
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  
  @@unique([playerId, season])
  @@map("player_predictions")
}

model Watchlist {
  id       String @id @default(cuid())
  userId   String @map("user_id")
  playerId String @map("player_id")
  
  createdAt DateTime @default(now()) @map("created_at")
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  
  @@unique([userId, playerId])
  @@map("watchlists")
}